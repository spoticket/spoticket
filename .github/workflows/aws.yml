name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2                  
  ECR_REPOSITORY: spoticket                
  ECS_SERVICE: spoticket-service           
  ECS_CLUSTER: spoticket-cluster           
  ECS_TASK_DEFINITION: .github/workflows/spoticket-task-revision1.json
  CONTAINER_NAME: spoticket-container           

permissions:
  contents: read

jobs:
  build:
    name: Build Jar
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build with Gradle for each service
      run: |
        SERVICES=(
          "com.spoticket.gateway"
          "com.spoticket.payment"
          "com.spoticket.server"
          "com.spoticket.team-stadium"
          "com.spoticket.ticket"
          "com.spoticket.user"
          "com.spoticket.games"
        )
        
        for SERVICE in "${SERVICES[@]}"; do
          cd ./$SERVICE
          chmod +x gradlew
          ./gradlew clean build -x test
          cd ..
        done

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-libs
        path: '**/build/libs/*.jar'

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-libs
        path: '**/build/libs/*.jar'

    - name: Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-libs

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push images to Amazon ECR
      id: build-images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

        cd $GITHUB_WORKSPACE
      
        SERVICES=(
          "com.spoticket.gateway"
          "com.spoticket.payment"
          "com.spoticket.server"
          "com.spoticket.team-stadium"
          "com.spoticket.ticket"
          "com.spoticket.user"
          "com.spoticket.games"
        )
        
        for SERVICE in "${SERVICES[@]}"; do
          sed -i "s|image: com.spoticket.$SERVICE|image: $ECR_REGISTRY/$ECR_REPOSITORY/com.spoticket.$SERVICE:$IMAGE_TAG|" docker-compose.yml
        done
        
        docker-compose build
        docker-compose push
    
        for SERVICE in "${SERVICES[@]}"; do
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY/com.spoticket.$SERVICE:$IMAGE_TAG" >> $GITHUB_OUTPUT
        done
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: .github/workflows/spoticket-task-revision1.json
        container-name: spoticket-container
        image: ${{ steps.build-images.outputs.image }}
        environment-variables: |
          DB_URL=${{ secrets.DB_URL }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          TOSS_API_SECRET=${{ secrets.TOSS_API_SECRET }}
          SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
